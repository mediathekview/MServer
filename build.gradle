import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files

plugins {
    id "com.github.jk1.dependency-license-report" version "0.3.5"
    id "org.sonarqube" version "2.7.1"
}

apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'maven'
apply plugin: 'signing'
apply from: "${project.rootDir}/gradle/eclipse.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'de.mediathekview'
archivesBaseName = "MServer"
version = '3.1.109'

def jarName = 'MServer.jar'
def mainClass = 'mServer.Main'

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}
compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

task copyRuntimeLibs(type: Copy) {
    into "libs"
    from configurations.testRuntime - configurations.runtime
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

sourceSets {
    developTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/developTest/java')
        }
        resources.srcDir file('src/test/developTest/resources')
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/integrationTest/java')
        }
        resources.srcDir file('src/test/integrationTest/resources')
    }
    performanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/performanceTest/java')
        }
        resources.srcDir file('src/test/performanceTest/resources')
    }
}

configurations {
    deployerJars
    developTestCompile.extendsFrom testCompile
    developTestRuntime.extendsFrom testRuntime
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    performanceTestCompile.extendsFrom testCompile
    performanceTestRuntime.extendsFrom testRuntime
}

test {
}

task developTest(type: Test) {
    testClassesDirs = sourceSets.developTest.output.classesDirs
    classpath = sourceSets.developTest.runtimeClasspath
    outputs.upToDateWhen { false }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

task performanceTest(type: Test) {
    logger.info("hier")
    testClassesDirs = sourceSets.performanceTest.output.classesDirs
    classpath = sourceSets.performanceTest.runtimeClasspath
    outputs.upToDateWhen { false }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

dependencies {
    compile 'de.mediathekview:MLib:3.0.3'
    compile 'commons-net:commons-net:3.6'
    compile 'org.apache.commons:commons-compress:1.18'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.tukaani:xz:1.8'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'org.glassfish.jersey.core:jersey-client:2.28'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.28'
    compile 'com.sun.jersey:jersey-client:1.19.4'
    compile 'com.squareup.okhttp3:okhttp:3.14.2'
    compile 'org.jsoup:jsoup:1.12.1'
    compile 'javax.activation:activation:1.1'
    compile 'com.google.guava:guava:28.1-jre'

    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    compile group: 'fm.void.jetm', name: 'jetm', version: '1.2.3'

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.+"
    testCompile "com.squareup.okhttp3:mockwebserver:3.6.0"
    testCompile "org.hamcrest:hamcrest-all:1.3"
}

configurations.compile {
    resolutionStrategy.dependencySubstitution {
        def substituteIfExists = { String moduleName, String projectName ->
            if (findProject(projectName)) {
                assert !(project.hasProperty('org.gradle.configureondemand') && Boolean.valueOf(project.getProperty('org.gradle.configureondemand'))): "org.gradle.configureondemand = true will cause problems when substituting a project"
                logger.lifecycle "$project: Substituting module '$moduleName' with project $projectName"
                substitute module(moduleName) with project(projectName)
            }
        }
        substituteIfExists('de.mediathekview:MLib', ':MLib')
    }
}

ext {
    propsFile = file('src/main/resources/version.properties').absoluteFile
    if (!propsFile.exists()) {
        Files.createFile(propsFile.toPath())
    }
}

def loadVersionProperties() {
    Properties props = new Properties()
    props.load(propsFile.newDataInputStream())
    return props
}

if (project.hasProperty('SONATYPE_USERNAME')) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/content/repositories/releases/") {
                    authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'The crawler for mediathekview/MediathekView'
                    url 'https://github.com/mediathekview/' + project.name

                    scm {
                        connection 'scm:git:git://github.com/mediathekview/MServer.git'
                        developerConnection 'scm:git:ssh://github.com:mediathekview/MServer.git'
                        url 'http://github.com/mediathekview/MServer/tree/master'
                    }

                    licenses {
                        license {
                            name 'GNU General Public License v3.0'
                            url 'https://www.gnu.org/licenses/gpl.html'
                        }
                    }

                    developers {
                        developer {
                            id 'Nicklas2751'
                            name 'Nicklas Wiegandt'
                            email 'nicklas@mediathekview.de'
                        }
                        developer {
                            id 'derreisende77'
                            name 'Christian F.'
                            url 'https://github.com/derreisende77'
                        }
                        developer {
                            id 'pidoubleyou'
                            name 'Peter W.'
                            url 'https://github.com/pidoubleyou'
                        }
                        developer {
                            id 'TheSasch'
                            name 'Sascha Wiegandt'
                            url 'https://github.com/thesasch'
                        }
                        developer {
                            id 'alex1702'
                            name 'Alexander Finkh√§user'
                            url 'https://github.com/alex1702'
                        }
                    }
                }
            }
        }
    }
    task myJavadocs(type: Javadoc) {
        source = sourceSets.main.allJava
        failOnError = false
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from myJavadocs
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}
build.dependsOn(install)
task updateVersion {
    doLast {
        Properties props = loadVersionProperties()
        def oldVersion = props.getProperty('VERSION')
        String buildDate = new Date().format('dd.MM.yyyy HH:mm:ss')
        if (!oldVersion.equals(project.version)) {
            logger.lifecycle "==mserver======================"
            logger.lifecycle "Version: $project.version"
            logger.lifecycle "Baudatum: $buildDate"
            logger.lifecycle "==mserver======================"
            props.setProperty('VERSION', project.version)
            props.setProperty('DATE', buildDate)
            props.store(propsFile.newWriter(), null)
        }
    }
}

processResources.dependsOn updateVersion

licenseReport {
    outputDir = "build/Copyright/"
    excludes = [':MSearch', 'MediathekView:MLib']
    configurations = ['compile']
}

processResources.dependsOn generateLicenseReport

[distZip, distTar]*.shouldRunAfter compileJava, updateVersion, jar
distTar.compression = Compression.GZIP
distTar.extension = 'tar.gz'

jar {
    manifest {
        attributes(
                'Main-Class': mainClass,
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
        )
    }
    archiveName = jarName
}

distributions {
    main {
        baseName = 'MServer'
        contents {
            into('lib') {
                from configurations.compile
            }
            from('dist') {
                filesMatching('**/*.sh') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
                filesMatching('**/*.txt') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
                filesMatching('**/*.command') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
            }
            from('build/libs') {
                include '*.jar'
            }
            from('build') {
                include 'Copyright/*'
            }
        }
    }
}

/**
 * This is how you pass arguments: "./gradlew run -Pargs=arg1,arg2,arg3
 */
task run(type: JavaExec, dependsOn: classes) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath

    if (project.hasProperty('args')) {
        args(project.args.split(','))
    }
}

/**
 * HOWTO debug:
 *  1. run "gradle debug"
 *  2. Call your IDE to connect to a remote java application on port 5005.
 *
 * This is how you pass arguments: "./gradlew debug -Pargs=arg1,arg2,arg3
 */
task debug(type: JavaExec, dependsOn: classes) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    debug true

    if (project.hasProperty('args')) {
        args(project.args.split(','))
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if a new releass (tag) will be build!<b/>
 * Call this so: './gradlew build release -PrepoPw=[PASSWORD]'
 */
task release(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Version ' + version
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if you push to develop!<b/>
 * Call this so: './gradlew build releaseSnapshot -PrepoPw=[PASSWORD]'
 */
task releaseSnapshot(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Snapshot Version ' + version
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(releaseSnapshot)) {
        version = version + '-SNAPSHOT'
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "mediathekview_MediathekView"
    }
}

