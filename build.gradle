apply plugin: 'java'
apply plugin: 'distribution'
apply from: "${project.rootDir}/gradle/eclipse.gradle"
import java.nio.file.Files
import java.nio.file.Paths
import org.apache.tools.ant.filters.ReplaceTokens

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '2.0.1'

def jarName = 'MServer.jar'
def mainClass = 'mServer.Main'

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}
compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

task copyRuntimeLibs(type: Copy) {
    into "libs"
    from configurations.testRuntime - configurations.runtime
}

repositories {
    maven {
          url "https://repo.mediathekview.de/repository/maven-public/"
    }
}

dependencies {
    compile project(':MSearch')
    compile 'commons-net:commons-net:3.5'
    compile 'org.apache.commons:commons-compress:1.12'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.tukaani:xz:1.5'
    compile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
}

ext {
    propsFile = file('src/main/resources/version.properties').absoluteFile
    if(!propsFile.exists()) {
        Files.createFile(propsFile.toPath())
    }
}

def loadVersionProperties() {
    Properties props = new Properties()
    props.load(propsFile.newDataInputStream())
    return props
}

task updateVersion << {
    Properties props = loadVersionProperties()
    def oldVersion = props.getProperty('VERSION')
    if(!oldVersion.equals(project.version)) {
        logger.lifecycle "==mserver======================"
        logger.lifecycle "Version: $project.version"
        logger.lifecycle "==mserver======================"
        props.setProperty('VERSION', project.version)	
        props.store(propsFile.newWriter(), null)
    }
}

processResources.dependsOn updateVersion

[distZip, distTar]*.shouldRunAfter compileJava, updateVersion, jar

jar {
    manifest {
        attributes(
                'Main-Class': mainClass,
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
        )
    }
    archiveName = jarName
}

distributions {
    main {
        baseName = 'MServer'
        contents {
            into('lib')
                    {
                        from configurations.compile
                    }
            from('dist')
                    {
                        filesMatching('**/*.sh')
                                {
                                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                                }
                        filesMatching('**/*.txt')
                                {
                                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                                }
                        filesMatching('**/*.command')
                                {
                                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                                }
                    }

            from('build/libs')
                    {
                        include '*.jar'
                    }

        }
    }
}

/**
 * HOWTO debug:
 *  1. run "gradle debug"
 *  2. Call your IDE to connect to a remote java application on port 5005.
 */
task debug (type: JavaExec, dependsOn: classes){
    main = 'mServer.Main'
    classpath = sourceSets.main.runtimeClasspath
    args '-gui'
    debug true
}

